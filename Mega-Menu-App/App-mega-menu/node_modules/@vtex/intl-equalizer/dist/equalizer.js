"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalize = equalize;
exports.equalizeRegionLocales = equalizeRegionLocales;

var _diff = require("diff");

var _intlMessageformatParser = require("intl-messageformat-parser");

var _constants = require("./constants");

var _fileReader = _interopRequireDefault(require("./fileReader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getExtraKeys(referenceKeys, currentLanguageKeys) {
  return currentLanguageKeys.filter(function (key) {
    return !referenceKeys.some(function (currKey) {
      return currKey === key;
    });
  });
}

function getCorrectLines(referenceOrder, languageOrder) {
  var diff = (0, _diff.diffArrays)(referenceOrder, languageOrder);
  var correctLines = diff.reduce(function (chunks, line) {
    var _line$value = _slicedToArray(line.value, 1),
        key = _line$value[0];

    if (line.removed || line.added) {
      if (!chunks[key]) {
        chunks[key] = {};
      }
    }

    if (line.removed) {
      chunks[key] = _objectSpread(_objectSpread({}, chunks[key]), {}, {
        wrongLine: languageOrder.indexOf(key)
      });
    } else if (line.added) {
      chunks[key] = _objectSpread(_objectSpread({}, chunks[key]), {}, {
        correctLine: referenceOrder.indexOf(key)
      });
    }

    return chunks;
  }, {});
  return Object.keys(correctLines).map(function (key) {
    return _objectSpread({
      key: key
    }, correctLines[key]);
  });
}

function equalize(_ref) {
  var languages = _ref.languages,
      localesDirectory = _ref.localesDirectory,
      referenceLocale = _ref.referenceLocale;
  var termsPerLanguage = (0, _fileReader["default"])({
    languages: languages,
    localesDirectory: localesDirectory
  });
  var hasEmptyLanguage = languages.some(function (language) {
    return !termsPerLanguage[language] || Object.keys(termsPerLanguage[language]).length === 0;
  });

  if (hasEmptyLanguage) {
    return {
      error: {
        code: _constants.ERRORS.ERROR_NO_KEYS_LOCALE,
        data: languages.find(function (language) {
          return !termsPerLanguage[language] || Object.keys(termsPerLanguage[language]).length === 0;
        })
      }
    };
  }
  /** @type {import('./syntaxErrors').EqualizeResult} */


  var processedLanguages = {};
  var referenceOrder = Object.keys(termsPerLanguage[referenceLocale]);
  Object.keys(termsPerLanguage[referenceLocale]).forEach(function (key) {
    languages.forEach(function (language) {
      if (!processedLanguages[language]) {
        processedLanguages[language] = {
          missingKeys: [],
          wrongOrderKeys: [],
          syntaxErrors: [],
          extraKeys: []
        };
      }

      var languageTranslation = termsPerLanguage[language][key];

      if (!languageTranslation) {
        processedLanguages[language].missingKeys.push(_objectSpread({
          key: key
        }, termsPerLanguage[referenceLocale][key]));
      } else {
        try {
          // eslint-disable-next-line no-unused-vars
          var parsedMessage = (0, _intlMessageformatParser.parse)(languageTranslation, {
            captureLocation: true
          }); // TODO: check if the AST of `parsedMessage` is roughly the same
          // as the reference locale
        } catch (err) {
          processedLanguages[language].syntaxErrors.push({
            key: key,
            error: err,
            message: languageTranslation
          });
        }
      }

      var languageOrder = Object.keys(termsPerLanguage[language]);
      processedLanguages[language].wrongOrderKeys = getCorrectLines(referenceOrder, languageOrder);
      processedLanguages[language].extraKeys = getExtraKeys(Object.keys(termsPerLanguage[referenceLocale]), Object.keys(termsPerLanguage[language]));
    });
  });
  return processedLanguages;
}

function equalizeRegionLocales(_ref2) {
  var regionLocales = _ref2.regionLocales,
      referenceLocale = _ref2.referenceLocale,
      localesDirectory = _ref2.localesDirectory;
  var languages = [].concat(_toConsumableArray(regionLocales), [referenceLocale]);
  var termsPerLanguage = (0, _fileReader["default"])({
    languages: languages,
    localesDirectory: localesDirectory
  });
  var processedLanguages = {};
  regionLocales.forEach(function (region) {
    processedLanguages[region] = {
      extraKeys: getExtraKeys(Object.keys(termsPerLanguage[referenceLocale]), Object.keys(termsPerLanguage[region]))
    };
  });
  return processedLanguages;
}