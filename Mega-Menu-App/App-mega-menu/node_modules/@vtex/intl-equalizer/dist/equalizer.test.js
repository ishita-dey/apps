"use strict";

var _equalizer = require("./equalizer");

var _constants = require("./constants");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

jest.mock('fs');
describe('Equalizer', function () {
  it('should return error if doesnt have keys in a file', function () {
    var _require$__setMockFil;

    require('fs').__setMockFiles((_require$__setMockFil = {}, _defineProperty(_require$__setMockFil, "".concat(process.cwd(), "/src/__fixtures__/emptyLocales/en.js"), ''), _defineProperty(_require$__setMockFil, "".concat(process.cwd(), "/src/__fixtures__/emptyLocales/pt.json"), ''), _require$__setMockFil));

    var result = (0, _equalizer.equalize)({
      languages: ['en', 'pt'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/emptyLocales"),
      referenceLocale: 'en'
    });
    expect(result.error.data).toEqual('en');
    expect(result.error.code).toEqual(_constants.ERRORS.ERROR_NO_KEYS_LOCALE);
  });
  it('should return one missing key', function () {
    var _require$__setMockFil2;

    require('fs').__setMockFiles((_require$__setMockFil2 = {}, _defineProperty(_require$__setMockFil2, "".concat(process.cwd(), "/src/__fixtures__/locales/pt.json"), ''), _defineProperty(_require$__setMockFil2, "".concat(process.cwd(), "/src/__fixtures__/locales/en.js"), ''), _require$__setMockFil2));

    var result = (0, _equalizer.equalize)({
      languages: ['en', 'pt'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/locales"),
      referenceLocale: 'pt'
    });
    expect(result.en.missingKeys).toHaveLength(1);
  });
  it('should return equal locales', function () {
    var _require$__setMockFil3;

    require('fs').__setMockFiles((_require$__setMockFil3 = {}, _defineProperty(_require$__setMockFil3, "".concat(process.cwd(), "/src/__fixtures__/equalLocales/pt.json"), ''), _defineProperty(_require$__setMockFil3, "".concat(process.cwd(), "/src/__fixtures__/equalLocales/en.js"), ''), _require$__setMockFil3));

    var result = (0, _equalizer.equalize)({
      languages: ['en', 'pt'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/equalLocales"),
      referenceLocale: 'pt'
    });
    expect(result.en.missingKeys).toHaveLength(0);
    expect(result.pt.missingKeys).toHaveLength(0);
  });
  it('should return if keys are out of order', function () {
    var _require$__setMockFil4;

    require('fs').__setMockFiles((_require$__setMockFil4 = {}, _defineProperty(_require$__setMockFil4, "".concat(process.cwd(), "/src/__fixtures__/outOfOrder/pt.json"), ''), _defineProperty(_require$__setMockFil4, "".concat(process.cwd(), "/src/__fixtures__/outOfOrder/en.json"), ''), _require$__setMockFil4));

    var result = (0, _equalizer.equalize)({
      languages: ['en', 'pt'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/outOfOrder"),
      referenceLocale: 'pt'
    });
    expect(result.en.wrongOrderKeys).toHaveLength(2);
    expect(result.en.wrongOrderKeys[0].key).toBe('anotherExample');
    expect(result.en.wrongOrderKeys[0].wrongLine).toBe(1);
    expect(result.en.wrongOrderKeys[0].correctLine).toBe(2);
  });
  it('should validate invalid keys for regionLocales', function () {
    var _require$__setMockFil5;

    require('fs').__setMockFiles((_require$__setMockFil5 = {}, _defineProperty(_require$__setMockFil5, "".concat(process.cwd(), "/src/__fixtures__/outOfOrder/pt-PT.json"), ''), _defineProperty(_require$__setMockFil5, "".concat(process.cwd(), "/src/__fixtures__/outOfOrder/en-US.json"), ''), _defineProperty(_require$__setMockFil5, "".concat(process.cwd(), "/src/__fixtures__/outOfOrder/en.json"), ''), _require$__setMockFil5));

    var result = (0, _equalizer.equalizeRegionLocales)({
      regionLocales: ['pt-PT', 'en-US'],
      referenceLocale: 'en',
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/outOfOrder")
    });
    expect(result['en-US'].extraKeys).toHaveLength(0);
    expect(result['pt-PT'].extraKeys).toHaveLength(1);
  });
});