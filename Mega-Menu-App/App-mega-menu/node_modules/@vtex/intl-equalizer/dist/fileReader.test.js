"use strict";

var _fileReader = _interopRequireDefault(require("./fileReader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

jest.mock('fs');
describe('File Reader', function () {
  it('should return an object by languages and their messages', function () {
    var _require$__setMockFil;

    require('fs').__setMockFiles((_require$__setMockFil = {}, _defineProperty(_require$__setMockFil, "".concat(process.cwd(), "/src/__fixtures__/locales/en.js"), ''), _defineProperty(_require$__setMockFil, "".concat(process.cwd(), "/src/__fixtures__/locales/pt.json"), ''), _require$__setMockFil));

    var result = (0, _fileReader["default"])({
      languages: ['en', 'pt'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/locales")
    });
    expect(result.pt).toBeDefined();
    expect(result.pt.example).toBe('text');
    expect(result.pt.anotherExample).toBe('text');
    expect(result.en).toBeDefined();
    expect(result.en.example).toBe('text');
  });
  it('should return an empty object if language file is not found', function () {
    var _require$__setMockFil2;

    require('fs').__setMockFiles((_require$__setMockFil2 = {}, _defineProperty(_require$__setMockFil2, "".concat(process.cwd(), "/src/__fixtures__/locales/en.js"), ''), _defineProperty(_require$__setMockFil2, "".concat(process.cwd(), "/src/__fixtures__/locales/pt.json"), ''), _require$__setMockFil2));

    var result = (0, _fileReader["default"])({
      languages: ['en', 'pt', 'es'],
      localesDirectory: "".concat(process.cwd(), "/src/__fixtures__/locales")
    });
    expect(result.pt).toBeDefined();
    expect(result.en).toBeDefined();
    expect(result.es).toBeDefined();
    expect(Object.keys(result.es)).toHaveLength(0);
  });
});