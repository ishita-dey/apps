"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fix;

var _languages = require("./languages");

var _configure2 = _interopRequireDefault(require("./configure"));

var _errors = _interopRequireDefault(require("./errors"));

var _fileReader = _interopRequireDefault(require("./fileReader"));

var _fileWriter = _interopRequireDefault(require("./fileWriter"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function fix() {
  var _configure = (0, _configure2["default"])(),
      filesToIgnore = _configure.filesToIgnore,
      localesDirectory = _configure.localesDirectory,
      referenceLocale = _configure.referenceLocale;

  var availableLanguages = (0, _languages.getAvailableLanguages)({
    directory: localesDirectory,
    filesToIgnore: filesToIgnore
  });

  if (availableLanguages.error) {
    (0, _errors["default"])(availableLanguages.error, localesDirectory);
  }

  var languages = availableLanguages.generalLocales;
  var termsPerLanguage = (0, _fileReader["default"])({
    languages: languages,
    localesDirectory: localesDirectory
  });
  var failedSortLanguages = [];
  var sortedLanguages = languages.reduce(function (accLanguages, locale) {
    var localeKeysLength = Object.keys(termsPerLanguage[locale]).length;
    var referenceLocaleKeysLength = Object.keys(termsPerLanguage[referenceLocale]).length;

    if (localeKeysLength !== referenceLocaleKeysLength) {
      console.log(_constants.MESSAGES.ERROR_COULD_NOT_FIX({
        referenceLocale: referenceLocale,
        locale: locale,
        referenceLocaleLength: referenceLocaleKeysLength,
        localeLength: localeKeysLength
      }));
      failedSortLanguages.push(locale);
      return _objectSpread(_objectSpread({}, accLanguages), {}, _defineProperty({}, locale, termsPerLanguage[locale]));
    }

    var sortedLanguage = Object.keys(termsPerLanguage[referenceLocale]).reduce(function (acc, key) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, termsPerLanguage[locale][key]));
    }, {});
    return _objectSpread(_objectSpread({}, accLanguages), {}, _defineProperty({}, locale, sortedLanguage));
  }, {});
  (0, _fileWriter["default"])({
    sortedLanguages: sortedLanguages,
    failedSortLanguages: failedSortLanguages,
    locales: languages,
    localesDirectory: localesDirectory,
    referenceLocale: referenceLocale
  });
  console.log(_constants.MESSAGES.SUCCESS_FIX);
  process.exit(0);
}