"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _equalizer = require("./equalizer");

var _configure2 = _interopRequireDefault(require("./configure"));

var _errors = _interopRequireDefault(require("./errors"));

var _languages = require("./languages");

var _constants = require("./constants");

var _missingKeysTable = _interopRequireDefault(require("./missingKeysTable"));

var _wrongOrderKeysTable = _interopRequireDefault(require("./wrongOrderKeysTable"));

var _extraKeysTable = _interopRequireDefault(require("./extraKeysTable"));

var _syntaxErrors = require("./syntaxErrors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function hasExtraKeys(languages, equalizedList) {
  return languages.some(function (language) {
    return equalizedList[language].extraKeys.length !== 0;
  });
}

function start() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _configure = (0, _configure2["default"])(),
      referenceLocale = _configure.referenceLocale,
      localesDirectory = _configure.localesDirectory,
      filesToIgnore = _configure.filesToIgnore;

  var availableLanguages = (0, _languages.getAvailableLanguages)({
    directory: localesDirectory,
    filesToIgnore: filesToIgnore
  });

  if ('error' in availableLanguages) {
    (0, _errors["default"])(availableLanguages.error, localesDirectory);
    return;
  }

  var languages = availableLanguages.generalLocales;
  var result = (0, _equalizer.equalize)({
    languages: languages,
    localesDirectory: localesDirectory,
    referenceLocale: referenceLocale
  });

  if (result.error) {
    (0, _errors["default"])(result.error.code, result.error.data);
    return;
  }

  var hasSyntaxErrors = languages.some(function (language) {
    return result[language].syntaxErrors.length > 0;
  });

  if (hasSyntaxErrors) {
    // @ts-ignore: FIXME
    (0, _syntaxErrors.logSyntaxErrors)(languages, result);
    if (!options.all) process.exit(1);
  }

  if (hasExtraKeys(languages, result)) {
    (0, _extraKeysTable["default"])(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  var hasMissingTerms = languages.some(function (language) {
    return result[language].missingKeys.length !== 0;
  });

  if (hasMissingTerms) {
    (0, _missingKeysTable["default"])(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  var hasWrongOrderKeys = languages.some(function (language) {
    return result[language].wrongOrderKeys.length !== 0;
  });

  if (hasWrongOrderKeys) {
    (0, _wrongOrderKeysTable["default"])(result, referenceLocale);
    if (!options.all) process.exit(1);
  }

  var hasExtraKeysRegion = false;

  if (availableLanguages.regionLocales.length > 0) {
    var regionResult = (0, _equalizer.equalizeRegionLocales)({
      regionLocales: availableLanguages.regionLocales,
      localesDirectory: localesDirectory,
      referenceLocale: referenceLocale
    });
    hasExtraKeysRegion = hasExtraKeys(availableLanguages.regionLocales, regionResult);

    if (hasExtraKeysRegion) {
      (0, _extraKeysTable["default"])(regionResult, referenceLocale);
      if (!options.all) process.exit(1);
    }
  }

  if (options.all && (hasExtraKeys || hasMissingTerms || hasWrongOrderKeys || hasExtraKeysRegion || hasSyntaxErrors)) {
    process.exit(1);
  }

  console.log(_constants.MESSAGES.SUCCESS);
  process.exit(0);
}

var _default = start;
exports["default"] = _default;