"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logSyntaxErrors = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\u274C {red {bold ", " syntax error(s) found in ", " language(s).}}"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["  Error in key {bold ", "}:"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["  {red ", " syntax error(s) found for language {bold ", "}}\n"], ["  {red ", " syntax error(s) found for language {bold ", "}}\\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var logSyntaxErrors = function logSyntaxErrors(languages, equalizeResult) {
  var totalErrors = 0;
  var totalLanguages = 0;
  languages.forEach(function (language) {
    var languageResult = equalizeResult[language];

    if (languageResult.syntaxErrors.length === 0) {
      return;
    }

    totalLanguages++;
    var syntaxErrors = languageResult.syntaxErrors;
    totalErrors += syntaxErrors.length;
    console.log((0, _chalk["default"])(_templateObject(), syntaxErrors.length, language));
    syntaxErrors.forEach(function (_ref) {
      var key = _ref.key,
          error = _ref.error,
          message = _ref.message;
      var columnOffsetWhitespace = new Array(error.location.start.column).join(' ');
      console.log((0, _chalk["default"])(_templateObject2(), key));
      console.log("\n      ".concat(message));
      console.log("      ".concat(columnOffsetWhitespace, "^"));
      console.log("      ".concat(columnOffsetWhitespace).concat(error.message, "\n"));
    });
  });
  console.log((0, _chalk["default"])(_templateObject3(), totalErrors, totalLanguages));
};

exports.logSyntaxErrors = logSyntaxErrors;